apply plugin: 'java'

sourceSets {
    main {
        resources {
            srcDirs 'src/main/bash'
        }
    }
}

task shellcheck(type: Exec) {
    sourceSets*.resources.srcDirs*.each { srcDir ->
        fileTree(relativePath(srcDir)).include('**/*.sh').each { File script ->
            commandLine "shellcheck", script
        }
    }
}

task validateSyntax() {
    FileTree tree = fileTree(dir: project.projectDir.path + '/src/main/bash', include: ['**/*.sh'])
    tree.each {
        def sout = new StringBuilder(), serr = new StringBuilder()
        def proc = "bash -n ${it.path}".execute()
        proc.consumeProcessOutput(sout, serr)
        proc.waitForOrKill(1000)
        if (sout.contains("error") || serr.contains("error")) {
            String processOutput = "SOUT: [\n\n ${sout} \n], SERR: [\n\n ${serr} \n]"
            throw new IllegalStateException("File [${it}] has invalid syntax. \n\n${processOutput}\n\n")
        }
    }
}

test.dependsOn validateSyntax